// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                 Int       @id @default(autoincrement())
    compoundId         String    @unique @map(name: "compound_id")
    userId             Int       @map(name: "user_id")
    providerType       String    @map(name: "provider_type")
    providerId         String    @map(name: "provider_id")
    providerAccountId  String    @map(name: "provider_account_id")
    refreshToken       String?   @map(name: "refresh_token")
    accessToken        String?   @map(name: "access_token")
    accessTokenExpires DateTime? @map(name: "access_token_expires")
    createdAt          DateTime  @default(now()) @map(name: "created_at")
    updatedAt          DateTime  @default(now()) @map(name: "updated_at")


    @@index([providerAccountId], name: "providerAccountId")
    @@index([providerId], name: "providerId")
    @@index([userId], name: "userId")
    @@map(name: "accounts")
}

model Reward {
    id           Int        @default(autoincrement()) @id
    placement    Int
    tournamentId String
    tournament   Tournament @relation(references: [id], fields: [tournamentId])
    points       Int

    @@unique([tournamentId, placement])
    @@map(name: "rewards")
}

model Session {
    id           Int      @id @default(autoincrement())
    userId       Int      @map(name: "user_id")
    expires      DateTime
    sessionToken String   @unique @map(name: "session_token")
    accessToken  String   @unique @map(name: "access_token")
    createdAt    DateTime @default(now()) @map(name: "created_at")
    updatedAt    DateTime @default(now()) @map(name: "updated_at")

    @@map(name: "sessions")
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map(name: "email_verified")
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @default(now()) @map(name: "updated_at")
    points        Int       @default(0)

    @@map(name: "users")
    memberships   TeamMembership[]
    notifications Notification[]
    gameAccounts  GameAccount[]
}

model VerificationRequest {
    id         Int      @id @default(autoincrement())
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now()) @map(name: "created_at")
    updatedAt  DateTime @default(now()) @map(name: "updated_at")

    @@map(name: "verification_requests")
}

model Tournament {
    id                   String   @id
    name                 String   @unique
    closed               Boolean  @default(false)
    started              Boolean  @default(false)
    organizer            Team     @relation(references: [id], fields: [teamId])
    game                 Game     @relation(references: [id], fields: [gameId])
    icon                 Image?   @relation(fields: [imageId], references: [id])
    groupSize            Int      // number of teams in grid (for Rocket League, it's 2, for TFT it's 8)
    teamSize             Int      // number of players int a group (for Rocket League it can be 1-3, for TFT it's 1)
    rounds               Int      // number of rounds until reaching the finals (2^rounds = how many team can participate maximum)
    startsAt             DateTime
    registrationClosesAt DateTime
    participants         TournamentParticipation[]
    applicants           TournamentApplication[]
    rewards              Reward[]

    imageId Int?
    teamId  String
    gameId  String
    @@map(name: "tournaments")
}

model Admin {
    userId Int  @id
    user   User @relation(references: [id], fields: [userId])

    @@map(name: "admins")
}

model News {
    id        Int      @default(autoincrement()) @id
    title     String
    content   Json
    createdAt DateTime @default(now())
    author    User
    cover     Image?

    @@map(name: "news")
}

model TournamentApplication {
    id         Int        @default(autoincrement()) @id
    tournament Tournament @relation(references: [id], fields: [tournamentId])
    team       Team       @relation(references: [id], fields: [teamId])
    players    User[]
    createdAt  DateTime   @default(now())

    tournamentId String
    teamId       String
    @@unique([teamId, tournamentId])
    @@map(name: "tournament_applications")
}

model TournamentGridElement {
    id          Int                     @default(autoincrement()) @id
    tournament  Tournament              @relation(references: [id], fields: [tournamentId])
    participant TournamentParticipation @relation(references: [id], fields: [participationId])
    round       Int
    group       Int
    match       TournamentMatch?        @relation(references: [id], fields: [matchId])

    tournamentId    String
    matchId         Int?
    participationId Int
    @@unique([participationId, matchId])
    @@unique([tournamentId, participationId, group, round])
    @@map(name: "tournament_grid_elements")
}

model TournamentParticipation {
    id           Int              @default(autoincrement()) @id
    team         Team             @relation(references: [id], fields: [teamId])
	tournament   Tournament       @relation(references: [id], fields: [tournamentId])
	players      User[]
	match        TournamentMatch? @relation(references: [id], fields: [matchId])
	placement    Int?

	matchId      Int?
	tournamentId String
	teamId       String
	@@unique([teamId, tournamentId])
    @@map(name: "tournament_participations")
}

model TeamMembership {
    user      User         @relation(references: [id], fields: [userId])
    team      Team         @relation(references: [id], fields: [teamId])
    role      TeamRoleType
    invitedAt DateTime
    joinedAt  DateTime     @default(now())

    userId Int
    teamId String
    @@id([userId, teamId])
    @@map(name: "team_memberships")
}

model TeamInvitation {
    user      User     @relation(references: [id], fields: [userId])
    team      Team     @relation(references: [id], fields: [teamId])
    invitedAt DateTime @default(now())

    userId Int
    teamId String
    @@id([userId, teamId])
    @@map(name: "team_invitations")
}

model TournamentMatchState {
    id         Int             @default(autoincrement()) @id
    state      Json            
    createdAt  DateTime        @default(now())
    acceptedBy User[]
    match      TournamentMatch @relation(references: [id], fields: [matchId])
    accepted   Boolean

    matchId Int
    @@unique([state, matchId])
    @@map(name: "tournament_match_states")
}

model Team {
    id             String           @id
    name           String           @unique
    updatedAt      DateTime         @default(now())
    createdAt      DateTime         @default(now())
    icon           Image?
    members        TeamMembership[]

    @@map(name: "teams")
}

model TournamentMatch {
    id              Int                       @default(autoincrement()) @id
    tournament      Tournament                @relation(references: [id], fields: [tournamentId])
    roomCode        RoomCode                  @relation(references: [id], fields: [roomCodeId])
    participants    TournamentParticipation[]
    joinUntil       DateTime?
    createRoomUntil DateTime
    state           MatchStateType

    roomCodeId   Int
    tournamentId String
    @@map(name: "tournament_matches")
}

model TournamentMatchReport {
    reporter    User            @relation(references: [id], fields: [reporterId])
    match       TournamentMatch @relation(references: [id], fields: [matchId])
    type        ReportType
    description String
    attachments Image[]

    matchId Int
    reporterId Int
    @@id([matchId, reporterId])
    @@map(name: "tournament_match_reports")
}

model Notification {
    id          Int               @default(autoincrement()) @id
    type        NotificationType?
    title       String
    description String
    createdAt   DateTime          @default(now())
    read        Boolean
    user        User              @relation(references: [id], fields: [userId])

    userId Int
    @@map(name: "notifications")
}

model RoomCode {
    id       Int     @default(autoincrement()) @id
    name     String
    password String?
    game     Game    @relation(references: [id], fields: [gameId])

    gameId String
    @@map(name: "match_join_datas")
}

model Image {
    id      Int     @id @default(autoincrement())
    path    String
    width   Int
    height  Int
    caption String?

    @@map(name: "images")
}

model Game {
    id   String @id
    name String

    @@map(name: "games")
}

model GameAccount {
    id   String @id
    game Game   @relation(references: [id], fields: [gameId])
    user User   @relation(references: [id], fields: [userId])

    gameId String
    userId Int
    @@map(name: "game_accounts")
}

enum TeamRoleType {
    OWNER
    PLAYER
}

enum ReportType {
    STARTED_BEFORE_EVERYONE_JOINED
    DIDNT_JOIN
    LEFT_BEFORE_GAME_FINISHED
    INVALID_PLAYER_JOINED
    ROOM_CODE_NOT_WORKING
}

enum MatchStateType {
    WAITING_FOR_ROOM_CREATION
    ONGOING
    FINISHED
    REPORTED
}

enum NotificationType {
    INFO
    WARNING
    ERROR
    SUCCESS
}
