
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.15.0
 * Query Engine version: e51dc3b5a9ee790a07104bec1c9477d51740fe54
 */
Prisma.prismaVersion = {
  client: "2.15.0",
  engine: "e51dc3b5a9ee790a07104bec1c9477d51740fe54"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  compoundId: 'compoundId',
  userId: 'userId',
  providerType: 'providerType',
  providerId: 'providerId',
  providerAccountId: 'providerAccountId',
  refreshToken: 'refreshToken',
  accessToken: 'accessToken',
  accessTokenExpires: 'accessTokenExpires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RewardScalarFieldEnum = makeEnum({
  id: 'id',
  placement: 'placement',
  tournamentId: 'tournamentId',
  points: 'points'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  expires: 'expires',
  sessionToken: 'sessionToken',
  accessToken: 'accessToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  points: 'points',
  tournamentApplicationId: 'tournamentApplicationId',
  tournamentParticipationId: 'tournamentParticipationId',
  tournamentMatchStateId: 'tournamentMatchStateId'
});

exports.Prisma.VerificationRequestScalarFieldEnum = makeEnum({
  id: 'id',
  identifier: 'identifier',
  token: 'token',
  expires: 'expires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TournamentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  closed: 'closed',
  started: 'started',
  groupSize: 'groupSize',
  teamSize: 'teamSize',
  rounds: 'rounds',
  startsAt: 'startsAt',
  registrationClosesAt: 'registrationClosesAt',
  imageId: 'imageId',
  teamId: 'teamId',
  gameId: 'gameId'
});

exports.Prisma.AdminScalarFieldEnum = makeEnum({
  userId: 'userId'
});

exports.Prisma.NewsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  userId: 'userId',
  imageId: 'imageId'
});

exports.Prisma.TournamentApplicationScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  tournamentId: 'tournamentId',
  teamId: 'teamId'
});

exports.Prisma.TournamentGridElementScalarFieldEnum = makeEnum({
  id: 'id',
  round: 'round',
  group: 'group',
  tournamentId: 'tournamentId',
  matchId: 'matchId',
  participationId: 'participationId'
});

exports.Prisma.TournamentParticipationScalarFieldEnum = makeEnum({
  id: 'id',
  placement: 'placement',
  matchId: 'matchId',
  tournamentId: 'tournamentId',
  teamId: 'teamId'
});

exports.Prisma.TeamMembershipScalarFieldEnum = makeEnum({
  role: 'role',
  invitedAt: 'invitedAt',
  joinedAt: 'joinedAt',
  userId: 'userId',
  teamId: 'teamId'
});

exports.Prisma.TeamInvitationScalarFieldEnum = makeEnum({
  invitedAt: 'invitedAt',
  userId: 'userId',
  teamId: 'teamId'
});

exports.Prisma.TournamentMatchStateScalarFieldEnum = makeEnum({
  id: 'id',
  state: 'state',
  createdAt: 'createdAt',
  accepted: 'accepted',
  matchId: 'matchId'
});

exports.Prisma.TeamScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  updatedAt: 'updatedAt',
  createdAt: 'createdAt',
  imageId: 'imageId'
});

exports.Prisma.TournamentMatchScalarFieldEnum = makeEnum({
  id: 'id',
  joinUntil: 'joinUntil',
  createRoomUntil: 'createRoomUntil',
  state: 'state',
  roomCodeId: 'roomCodeId',
  tournamentId: 'tournamentId'
});

exports.Prisma.TournamentMatchReportScalarFieldEnum = makeEnum({
  type: 'type',
  description: 'description',
  matchId: 'matchId',
  reporterId: 'reporterId'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  read: 'read',
  userId: 'userId'
});

exports.Prisma.RoomCodeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  password: 'password',
  gameId: 'gameId'
});

exports.Prisma.ImageScalarFieldEnum = makeEnum({
  id: 'id',
  path: 'path',
  width: 'width',
  height: 'height',
  caption: 'caption',
  tournamentMatchReportMatchId: 'tournamentMatchReportMatchId',
  tournamentMatchReportReporterId: 'tournamentMatchReportReporterId'
});

exports.Prisma.GameScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.GameAccountScalarFieldEnum = makeEnum({
  id: 'id',
  gameId: 'gameId',
  userId: 'userId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.TeamRoleType = makeEnum({
  OWNER: 'OWNER',
  PLAYER: 'PLAYER'
});

exports.MatchStateType = makeEnum({
  WAITING_FOR_ROOM_CREATION: 'WAITING_FOR_ROOM_CREATION',
  ONGOING: 'ONGOING',
  FINISHED: 'FINISHED',
  REPORTED: 'REPORTED'
});

exports.ReportType = makeEnum({
  STARTED_BEFORE_EVERYONE_JOINED: 'STARTED_BEFORE_EVERYONE_JOINED',
  DIDNT_JOIN: 'DIDNT_JOIN',
  LEFT_BEFORE_GAME_FINISHED: 'LEFT_BEFORE_GAME_FINISHED',
  INVALID_PLAYER_JOINED: 'INVALID_PLAYER_JOINED',
  ROOM_CODE_NOT_WORKING: 'ROOM_CODE_NOT_WORKING'
});

exports.NotificationType = makeEnum({
  INFO: 'INFO',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  SUCCESS: 'SUCCESS'
});

exports.Prisma.ModelName = makeEnum({
  Account: 'Account',
  Reward: 'Reward',
  Session: 'Session',
  User: 'User',
  VerificationRequest: 'VerificationRequest',
  Tournament: 'Tournament',
  Admin: 'Admin',
  News: 'News',
  TournamentApplication: 'TournamentApplication',
  TournamentGridElement: 'TournamentGridElement',
  TournamentParticipation: 'TournamentParticipation',
  TeamMembership: 'TeamMembership',
  TeamInvitation: 'TeamInvitation',
  TournamentMatchState: 'TournamentMatchState',
  Team: 'Team',
  TournamentMatch: 'TournamentMatch',
  TournamentMatchReport: 'TournamentMatchReport',
  Notification: 'Notification',
  RoomCode: 'RoomCode',
  Image: 'Image',
  Game: 'Game',
  GameAccount: 'GameAccount'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
